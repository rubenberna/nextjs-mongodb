{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar mongodb = require('mongodb');\n\nvar url = 'MONGODB_URL=mongodb+srv://redcarrots:mongoeasy@cluster0-tujv2.gcp.mongodb.net/test?retryWrites=true&w=majority';\nvar dbName = 'taskbooker_landing';\nvar colName = 'content';\n\nvar loadPageContent = function loadPageContent(url) {\n  var client, collection, data;\n  return _regeneratorRuntime.async(function loadPageContent$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(mongodb.MongoClient.connect(url, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true\n          }));\n\n        case 3:\n          client = _context.sent;\n          collection = client.db(dbName).collection(colName);\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(collection.find({\n            URL: url\n          }).toArray());\n\n        case 7:\n          data = _context.sent;\n          client.close();\n          return _context.abrupt(\"return\", data);\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 12]]);\n};\n\nmodule.exports = {\n  loadPageContent: loadPageContent\n};","map":{"version":3,"sources":["/home/rubenberna/code/Redcarrots/BossData/SEO_shell/db/mongodb.js"],"names":["mongodb","require","url","dbName","colName","loadPageContent","MongoClient","connect","useNewUrlParser","useUnifiedTopology","client","collection","db","find","URL","toArray","data","close","console","log","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,IAAMC,GAAG,GAAG,gHAAZ;AACA,IAAMC,MAAM,GAAG,oBAAf;AACA,IAAMC,OAAO,GAAG,SAAhB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAOH,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAECF,OAAO,CAACM,WAAR,CAAoBC,OAApB,CAA4BL,GAA5B,EAAiC;AAACM,YAAAA,eAAe,EAAE,IAAlB;AAAwBC,YAAAA,kBAAkB,EAAE;AAA5C,WAAjC,CAFD;;AAAA;AAEdC,UAAAA,MAFc;AAGdC,UAAAA,UAHc,GAGDD,MAAM,CAACE,EAAP,CAAUT,MAAV,EAAkBQ,UAAlB,CAA6BP,OAA7B,CAHC;AAAA;AAAA,2CAIDO,UAAU,CAACE,IAAX,CAAgB;AAACC,YAAAA,GAAG,EAAEZ;AAAN,WAAhB,EAA4Ba,OAA5B,EAJC;;AAAA;AAIdC,UAAAA,IAJc;AAKpBN,UAAAA,MAAM,CAACO,KAAP;AALoB,2CAMbD,IANa;;AAAA;AAAA;AAAA;AAQpBE,UAAAA,OAAO,CAACC,GAAR;;AARoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAYAC,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,eAAe,EAAfA;AADe,CAAjB","sourcesContent":["const mongodb = require('mongodb');\n\nconst url = 'MONGODB_URL=mongodb+srv://redcarrots:mongoeasy@cluster0-tujv2.gcp.mongodb.net/test?retryWrites=true&w=majority'\nconst dbName = 'taskbooker_landing'\nconst colName = 'content'\n\nconst loadPageContent = async (url) => {\n  try {\n    const client = await mongodb.MongoClient.connect(url, {useNewUrlParser: true, useUnifiedTopology: true})\n    const collection = client.db(dbName).collection(colName)\n    const data = await collection.find({URL: url}).toArray()\n    client.close()\n    return data\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nmodule.exports = {\n  loadPageContent\n}\n"]},"metadata":{},"sourceType":"script"}