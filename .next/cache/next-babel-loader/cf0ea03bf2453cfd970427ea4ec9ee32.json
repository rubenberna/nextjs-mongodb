{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/home/rubenberna/code/Redcarrots/BossData/SEO_shell/pages/[...slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { withRouter } from 'next/router';\nimport axios from 'axios';\nimport Layout from '../components/Layout';\nimport Headline from '../components/headline';\nimport SeoTable from '../components/table';\n\nvar Complex = function Complex(_ref) {\n  var content = _ref.content;\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, __jsx(Headline, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }), __jsx(SeoTable, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }));\n};\n/*\nEach Next.js page component allows us to fetch data server-side thanks to a function called getInitialProps. When this function is called, the initial page load is rendered server-side, which is great for SEO.\n*/\n\n\nComplex.getInitialProps = function _callee(_ref2) {\n  var asPath, urlContent, data, tableContant;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          asPath = _ref2.asPath;\n\n          if (!(asPath !== '/favicon.ico')) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(axios.post('http://localhost:3000/api/content', {\n            asPath: asPath\n          }));\n\n        case 4:\n          urlContent = _context.sent;\n          data = urlContent.data;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(axios.get('http://localhost:3000/api/content'));\n\n        case 8:\n          tableContant = _context.sent;\n          return _context.abrupt(\"return\", {\n            content: data[0]\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(Complex);","map":{"version":3,"sources":["/home/rubenberna/code/Redcarrots/BossData/SEO_shell/pages/[...slug].js"],"names":["withRouter","axios","Layout","Headline","SeoTable","Complex","content","getInitialProps","asPath","post","urlContent","data","get","tableContant"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,MAAEC,OAAF,QAAEA,OAAF;AAAA,SACd,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,OAAO,EAAEA,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,QAAD;AAAU,IAAA,OAAO,EAAEA,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADc;AAAA,CAAhB;AAOA;;;;;AAIAD,OAAO,CAACE,eAAR,GAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,UAAAA,MAAR,SAAQA,MAAR;;AAAA,gBACnBA,MAAM,KAAK,cADQ;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAEGP,KAAK,CAACQ,IAAN,CAAW,mCAAX,EAAgD;AAACD,YAAAA,MAAM,EAANA;AAAD,WAAhD,CAFH;;AAAA;AAEhBE,UAAAA,UAFgB;AAGdC,UAAAA,IAHc,GAGLD,UAHK,CAGdC,IAHc;AAAA;AAAA,2CAIKV,KAAK,CAACW,GAAN,CAAU,mCAAV,CAJL;;AAAA;AAIhBC,UAAAA,YAJgB;AAAA,2CAMf;AACLP,YAAAA,OAAO,EAAEK,IAAI,CAAC,CAAD;AADR,WANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAYA,eAAeX,UAAU,CAACK,OAAD,CAAzB","sourcesContent":["import { withRouter } from 'next/router'\nimport axios from 'axios'\n\nimport Layout from '../components/Layout'\nimport Headline from '../components/headline'\nimport SeoTable from '../components/table'\n\nconst Complex = ({content}) => (\n  <Layout>\n    <Headline content={content}/>\n    <SeoTable content={content}/>\n  </Layout>\n)\n\n/*\nEach Next.js page component allows us to fetch data server-side thanks to a function called getInitialProps. When this function is called, the initial page load is rendered server-side, which is great for SEO.\n*/\n\nComplex.getInitialProps = async ({asPath}) => {\n  if ( asPath !== '/favicon.ico' ) {\n    const urlContent = await axios.post('http://localhost:3000/api/content', {asPath})\n    const { data } = urlContent\n    const tableContant = await axios.get('http://localhost:3000/api/content')\n\n    return {\n      content: data[0],\n    }\n  }\n}\n\nexport default withRouter(Complex)\n"]},"metadata":{},"sourceType":"module"}